'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stream = exports.getPathToFile = exports.mkdir = exports.cannotBeUndefined = undefined;

var _fs = require('fs');

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _pytils = require('pytils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cannotBeUndefined = exports.cannotBeUndefined = function cannotBeUndefined(essentials) {
  (0, _pytils.mapx)(essentials, function (key, value) {
    if (!value) {
      throw key + ' cannot be undefined';
    }
  });
};

var fileMode = parseInt('0777', 8);

var mkdir = exports.mkdir = function mkdir(path) {
  return (0, _fs.stat)(path, function (err, stats) {
    if (err) {
      (0, _fs.mkdir)(path, fileMode, function (err) {
        if (err) {
          throw 'mkdir: ' + err;
        }
      });
    }
  });
};

var getPathToFile = exports.getPathToFile = function getPathToFile(path, prefix, format) {
  return function (name) {
    return path + '/' + prefix + '-' + name + '.' + format;
  };
};

var downloadProgress = function downloadProgress(file, value) {
  return console.log('Download Progress ' + (value / 1024 / 1024).toFixed(2) + ' MB in ' + file);
};

function ACC(file, show) {
  var _this = this;

  this.show = show;
  this.acc = 0;
  this.roll = function (value) {
    return _this.acc += value, _this.show(file, _this.acc);
  };
}

var stream = exports.stream = function stream(url, pathAndFile) {
  return new Promise(function (resolve, reject) {
    try {
      var _ref = new ACC(pathAndFile, downloadProgress),
          roll = _ref.roll;

      var reqStream = (0, _request2.default)(url);
      var fileStream = (0, _fs.createWriteStream)(pathAndFile);
      reqStream.pipe(fileStream);
      reqStream.on('data', function (data) {
        return roll(data.length);
      });
      reqStream.on('finish', function () {
        return resolve(fileName);
      });
    } catch (err) {
      reject(err);
    }
  });
};